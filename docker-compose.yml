version: "3"
services:
  postgres:
    image: library/postgres:13
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"

  library:
    container_name: library-service
    ports:
      - "8060:8060"
    # environment:
    #   SPRING_PROFILES_ACTIVE: local
    build:
      context: ./
      dockerfile: ./libraryservice/Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/libraries
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://library:8060/manage/health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      postgres:
        condition: service_started

  rating:
    container_name: rating-service
    ports:
      - "8050:8050"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/ratings
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    build:
      context: ./
      dockerfile: ./ratingservice/Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://rating:8050/manage/health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      postgres:
        condition: service_started

  reservation:
    container_name: reservation-service
    ports:
      - "8070:8070"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres/reservations
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    build:
      context: ./
      dockerfile: ./reservationservice/Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://reservation:8070/manage/health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      postgres:
        condition: service_started

  gateway:
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SERVICES_SYSTEM_LIBRARY=http://library:8060/api/v1/
      - SERVICES_SYSTEM_RESERVATION=http://reservation:8070/api/v1/
      - SERVICES_SYSTEM_RATING=http://rating:8050/api/v1/
    build:
      context: ./
      dockerfile: ./gateway/Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://gateway:8080/manage/health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      reservation:
        condition: service_started
      rating:
        condition: service_started
      library:
        condition: service_started

volumes:
  db-data: